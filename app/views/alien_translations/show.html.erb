<!DOCTYPE html>
<html lang="en" data-theme>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Alien Translation ‚Äî Single File</title>
  <style>
    :root {
      --bg: #0b1020;
      --panel: #121a33;
      --panel-2: #0f1730;
      --text: #e9ecf8;
      --muted: #a8b0c9;
      --accent: #7dd3fc;
      --accent-2: #a78bfa;
      --ok: #34d399;
      --bad: #fb7185;
      --warn: #f59e0b;
      --shadow: 0 10px 30px rgba(0,0,0,.35);
      --radius: 18px;
    }
    html, body {
      background: radial-gradient(1200px 700px at 70% -10%, #12204a 0%, var(--bg) 55%);
      color: var(--text);
      font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, "Apple Color Emoji","Segoe UI Emoji";
      height: 100%;
      margin: 0;
    }
    .wrap {
      max-width: 980px;
      margin: 40px auto;
      padding: 0 16px 40px;
    }
    header {
      display: flex; align-items: center; justify-content: space-between;
      gap: 12px; margin-bottom: 18px;
    }
    .brand {
      display: flex; align-items: center; gap: 12px;
      font-weight: 700; letter-spacing: .2px;
    }
    .brand .logo {
      width: 38px; height: 38px; border-radius: 12px;
      background: linear-gradient(135deg, var(--accent), var(--accent-2));
      box-shadow: var(--shadow);
      display: grid; place-items: center; font-size: 20px; color: #071018;
    }
    .pill {
      display:inline-flex; gap:8px; align-items:center;
      background: #0f1a40; border: 1px solid #1d2a5c; color: var(--muted);
      padding: 8px 12px; border-radius: 999px; font-size: 13px;
    }
    .card {
      background: linear-gradient(180deg, var(--panel), var(--panel-2));
      border: 1px solid #1b2550; border-radius: var(--radius);
      box-shadow: var(--shadow);
    }
    .grid {
      display: grid; gap: 16px;
      grid-template-columns: 1.2fr .8fr;
    }
    @media (max-width: 900px) {
      .grid { grid-template-columns: 1fr; }
    }

    /* Alien panel */
    .alien {
      padding: 20px;
      position: relative;
      overflow: hidden;
      min-height: 190px;
    }
    .alien h2 {
      margin: 0 0 10px; font-size: 14px; color: var(--muted); font-weight: 600;
      letter-spacing: .4px; text-transform: uppercase;
    }
    .glyphs {
      display: flex; flex-wrap: wrap; gap: 10px;
      padding: 16px 0 6px;
    }
    .glyph {
      padding: 10px 14px; border-radius: 14px;
      background: #0e1836; border: 1px solid #1d2a5c;
      font-size: 22px; letter-spacing: .5px;
      user-select: all;
    }
    .hint {
      margin-top: 12px; font-size: 13px; color: var(--muted);
      display: none;
    }
    .hint.show { display: block; }
    .legend {
      margin-top: 14px; display: flex; flex-wrap: wrap; gap: 8px;
      font-size: 12px; color: #cbd5e1;
    }
    .legend span {
      background: #0c1430; border: 1px solid #1b2a63; border-radius: 10px;
      padding: 6px 8px; white-space: nowrap;
    }

    /* Controls / input */
    .controls {
      padding: 20px;
      display: grid; gap: 12px;
    }
    .field {
      display: grid; gap: 8px;
    }
    label { font-size: 13px; color: var(--muted); }
    input[type="text"] {
      width: 100%; padding: 14px 14px; border-radius: 12px;
      background: #0d1430; border: 1px solid #1e2a5e; color: var(--text);
      font-size: 16px; outline: none; transition: border-color .2s ease;
    }
    input[type="text"]:focus { border-color: var(--accent); }
    .row { display: flex; gap: 10px; flex-wrap: wrap; }
    .btn {
      border: 1px solid #1c2a5a; background: #0f1836; color: #e6ebff;
      padding: 12px 14px; border-radius: 12px; font-weight: 600; cursor: pointer;
      transition: transform .05s ease, border-color .2s ease, background .2s ease;
    }
    .btn:hover { border-color: #3350aa; }
    .btn:active { transform: translateY(1px); }
    .btn.primary { background: linear-gradient(135deg, #1a2c6e, #193a86); border-color: #2b4bb8; }
    .btn.good { background: linear-gradient(135deg, #124e3a, #0e6b4f); border-color: #0b5d45; }
    .btn.warn { background: linear-gradient(135deg, #5b3b0a, #7a4f0f); border-color: #895d13; }
    .btn.ghost { background: #0d1430; }

    .status {
      display: grid; gap: 10px;
      padding: 20px;
    }
    .meters { display: grid; gap: 10px; }
    .meter {
      background: #0d1330; border: 1px solid #1b275c; border-radius: 12px; overflow: hidden;
      height: 14px; position: relative;
    }
    .meter > i {
      display: block; height: 100%; width: 0%;
      background: linear-gradient(90deg, var(--accent), var(--accent-2));
      transition: width .3s ease;
    }
    .meta {
      display:flex; gap:8px; flex-wrap:wrap; color: #cbd5e1; font-size: 13px;
    }
    .meta .chip {
      background: #0c1430; border: 1px solid #1b2a63; border-radius: 999px;
      padding: 6px 10px; display:flex; gap:8px; align-items:center;
    }
    .big {
      font-size: 44px; line-height: 1.1; font-weight: 800; letter-spacing: .3px;
    }
    .small { font-size: 12px; color: var(--muted); }

    .result {
      padding: 18px 20px; margin: 0 20px 20px; border-radius: 14px;
      border: 1px solid #21306a; background: #0c1534; display: none;
    }
    .result.show { display: block; }
    .ok { color: var(--ok); }
    .bad { color: var(--bad); }
    .muted { color: var(--muted); }

    /* Help bar */
    .helpbar {
      margin-top: 14px; display:flex; flex-wrap:wrap; gap:8px; align-items:center;
    }
    .helpbar .kbd {
      border: 1px solid #223067; background: #0e1836; color: #dce4ff;
      padding: 6px 8px; border-radius: 8px; font-size: 12px; letter-spacing:.2px;
    }

    footer {
      margin-top: 22px; color: var(--muted); font-size: 12px; text-align: center;
    }
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="brand">
        <div class="logo">üëΩ</div>
        <div>
          <div style="font-size:18px">Alien Translation</div>
          <div class="small">Decode transmissions. Type the human meaning.</div>
        </div>
      </div>
      <div class="pill" id="modePill" title="Toggle timed/free mode">
        <span id="modeLabel">Free mode</span>
        <button class="btn ghost" id="toggleModeBtn" aria-label="Toggle Mode">‚è± Mode</button>
      </div>
    </header>

    <div class="grid">
      <section class="card alien">
        <h2>Incoming Transmission</h2>
        <div id="glyphs" class="glyphs" aria-live="polite"></div>
        <div id="hint" class="hint"></div>
        <div class="legend" id="legend"></div>
      </section>

      <aside class="card status">
        <div class="meters">
          <div>
            <div class="small">Progress</div>
            <div class="meter" aria-label="Progress">
              <i id="progressBar" style="width:0%"></i>
            </div>
          </div>
          <div class="meta">
            <div class="chip">Score: <strong id="score">0</strong></div>
            <div class="chip">Streak: <strong id="streak">0</strong></div>
            <div class="chip">Best: <strong id="best">0</strong></div>
            <div class="chip" id="timerChip" style="display:none">Time: <strong id="timeLeft">60</strong>s</div>
            <div class="chip">Round: <strong id="roundNum">1</strong>/<span id="roundTotal">10</span></div>
          </div>
        </div>
        <div class="helpbar">
          <span class="kbd">Enter = Check</span>
          <span class="kbd">Ctrl+Enter = Next</span>
          <span class="kbd">Alt+H = Hint</span>
          <span class="kbd">Alt+R = Reset</span>
        </div>
      </aside>
    </div>

    <section class="card controls" aria-label="Controls">
      <div class="field">
        <label for="answer">Type the human translation</label>
        <input id="answer" type="text" placeholder="e.g. 'greetings traveller'‚Ä¶" autocomplete="off" />
      </div>
      <div class="row">
        <button class="btn primary" id="checkBtn">Check</button>
        <button class="btn" id="nextBtn">Next</button>
        <button class="btn warn" id="hintBtn" title="Show a contextual hint">Hint</button>
        <button class="btn ghost" id="resetBtn" title="Restart game (keep best score)">Reset</button>
      </div>
    </section>

    <div id="result" class="result" aria-live="polite"></div>

    <footer>
      Built as a single-file demo. No libraries. No tracking. Have fun decoding.
    </footer>
  </div>

  <script>
    // --- Game data -----------------------------------------------------------
    // Glyph vocabulary (word-level). Each glyph maps to a human word/phrase.
    const GLYPH_KEY = [
      { g: "‚òÖ", h: "greetings" },
      { g: "‚óè", h: "traveller" },
      { g: "‚ñ≤", h: "human" },
      { g: "‚óÜ", h: "friend" },
      { g: "‚òΩ", h: "peace" },
      { g: "‚ú¶", h: "we come in" }, // phrase
      { g: "‚åæ", h: "from the stars" },
      { g: "‚ü°", h: "share knowledge" },
      { g: "‚ú∑", h: "help" },
      { g: "‚òÑ", h: "danger" },
      { g: "‚òå", h: "listen" },
      { g: "‚òä", h: "respond" }
    ];

    // Rounds: alien sequence + accepted human translations (variants).
    const ROUNDS = [
      { a: ["‚òÖ","‚óè"], h: ["greetings traveller"] },
      { a: ["‚ú¶","‚òΩ"], h: ["we come in peace"] },
      { a: ["‚òÖ","‚ñ≤","‚òΩ"], h: ["greetings human peace","greetings human of peace"] },
      { a: ["‚åæ","‚óÜ"], h: ["from the stars friend","friend from the stars"] },
      { a: ["‚ü°","‚ú∑"], h: ["share knowledge help","help share knowledge"] },
      { a: ["‚òå","‚òä"], h: ["listen respond","respond listen"] },
      { a: ["‚òÑ","‚ñ≤","‚òå"], h: ["danger human listen","listen human danger"] },
      { a: ["‚òÖ","‚óÜ","‚òΩ"], h: ["greetings friend peace","greetings peace friend"] },
      { a: ["‚ú¶","‚åæ"], h: ["we come in from the stars","we come in, from the stars"] },
      { a: ["‚ü°","‚ñ≤","‚òä"], h: ["share knowledge human respond","human respond share knowledge","respond human share knowledge"] }
    ];

    // Settings
    const TOTAL_ROUNDS = ROUNDS.length;
    const TIMED_SECONDS = 60;

    // --- State ---------------------------------------------------------------
    let idx = 0;
    let score = 0;
    let streak = 0;
    let best = Number(localStorage.getItem("alien_best") || 0);
    let timedMode = false;
    let timeLeft = TIMED_SECONDS;
    let timer = null;
    let usedOrder = shuffle([...Array(ROUNDS.length).keys()]); // randomised order

    // --- DOM refs ------------------------------------------------------------
    const glyphsEl = document.getElementById("glyphs");
    const legendEl = document.getElementById("legend");
    const hintEl = document.getElementById("hint");
    const resultEl = document.getElementById("result");
    const answerEl = document.getElementById("answer");

    const scoreEl = document.getElementById("score");
    const streakEl = document.getElementById("streak");
    const bestEl = document.getElementById("best");
    const roundNumEl = document.getElementById("roundNum");
    const roundTotalEl = document.getElementById("roundTotal");
    const progressBarEl = document.getElementById("progressBar");
    const timeLeftEl = document.getElementById("timeLeft");
    const timerChipEl = document.getElementById("timerChip");

    const checkBtn = document.getElementById("checkBtn");
    const nextBtn = document.getElementById("nextBtn");
    const hintBtn = document.getElementById("hintBtn");
    const resetBtn = document.getElementById("resetBtn");
    const toggleModeBtn = document.getElementById("toggleModeBtn");
    const modeLabel = document.getElementById("modeLabel");

    // --- Utils ---------------------------------------------------------------
    function shuffle(arr) {
      for (let i = arr.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [arr[i], arr[j]] = [arr[j], arr[i]];
      }
      return arr;
    }
    function normalise(s) {
      return s
        .toLowerCase()
        .replace(/[.,!?]/g, "")
        .replace(/\s+/g, " ")
        .trim();
    }
    function arraysEqual(a,b){ return a.length===b.length && a.every((x,i)=>x===b[i]); }

    function showRound() {
      const round = ROUNDS[usedOrder[idx]];
      glyphsEl.innerHTML = "";
      round.a.forEach(g => {
        const b = document.createElement("div");
        b.className = "glyph";
        b.textContent = g;
        glyphsEl.appendChild(b);
      });

      // Small rotating legend to help newbies (shows 3 random mappings)
      const sample = shuffle([...GLYPH_KEY]).slice(0, 3);
      legendEl.innerHTML = sample.map(x => `<span>${x.g} = <em>${x.h}</em></span>`).join("");

      hintEl.classList.remove("show");
      resultEl.classList.remove("show");
      resultEl.innerHTML = "";
      answerEl.value = "";
      answerEl.focus();

      roundNumEl.textContent = String(idx + 1);
      roundTotalEl.textContent = String(TOTAL_ROUNDS);
      const pct = Math.round((idx) / TOTAL_ROUNDS * 100);
      progressBarEl.style.width = pct + "%";
    }

    function showHint() {
      const round = ROUNDS[usedOrder[idx]];
      // Hint strategy: reveal one mapped word from the current phrase
      const revealGlyph = round.a[Math.floor(Math.random() * round.a.length)];
      const mapped = GLYPH_KEY.find(x => x.g === revealGlyph)?.h || "???";
      hintEl.textContent = `Hint: ${revealGlyph} maps to ‚Äú${mapped}‚Äù.`;
      hintEl.classList.add("show");
    }

    function checkAnswer() {
      const round = ROUNDS[usedOrder[idx]];
      const val = normalise(answerEl.value);
      if (!val) {
        pulse(resultEl, `<span class="bad">Enter a translation first.</span>`);
        return;
      }

      const accepted = round.h.map(normalise);
      // Accept minor punctuation variance and order variants provided in data
      const ok = accepted.includes(val);

      if (ok) {
        streak += 1;
        // Score ramps with streak and phrase length
        const base = 100 + round.a.length * 15;
        const bonus = Math.min(streak * 20, 200);
        score += base + bonus;
        scoreEl.textContent = String(score);
        streakEl.textContent = String(streak);
        flash(resultEl, `<div class="ok">‚úî Correct!</div><div class="muted">+${base + bonus} pts</div>`);
        nextBtn.focus();
        // Update best
        if (score > best) {
          best = score;
          localStorage.setItem("alien_best", String(best));
          bestEl.textContent = String(best);
        }
      } else {
        streak = 0;
        streakEl.textContent = "0";
        flash(resultEl, `<div class="bad">‚úñ Not quite.</div><div class="muted">Try a different phrasing or use <strong>Hint</strong>.</div>`);
      }
    }

    function nextRound() {
      if (idx < TOTAL_ROUNDS - 1) {
        idx += 1;
        showRound();
      } else {
        endGame();
      }
    }

    function endGame(message) {
      clearInterval(timer);
      timer = null;
      const pct = Math.round((idx + 1) / TOTAL_ROUNDS * 100);
      progressBarEl.style.width = "100%";
      const msg = message || `Game over ‚Äî you decoded ${pct}% of transmissions.`;
      flash(resultEl, `<div class="ok">üèÅ ${msg}</div><div>Final score: <strong>${score}</strong>${score>=best? " (best!)":""}</div>`);
      nextBtn.disabled = true;
      checkBtn.disabled = true;
      hintBtn.disabled = true;
      answerEl.disabled = true;
    }

    function resetGame(keepMode=true) {
      clearInterval(timer);
      timer = null;
      timeLeft = TIMED_SECONDS;

      idx = 0;
      score = 0;
      streak = 0;
      usedOrder = shuffle([...Array(ROUNDS.length).keys()]);
      best = Number(localStorage.getItem("alien_best") || 0);

      scoreEl.textContent = "0";
      streakEl.textContent = "0";
      bestEl.textContent = String(best);
      timeLeftEl.textContent = String(timeLeft);

      nextBtn.disabled = false;
      checkBtn.disabled = false;
      hintBtn.disabled = false;
      answerEl.disabled = false;

      if (keepMode && timedMode) startTimer();
      updateModeUI();
      showRound();
    }

    function startTimer() {
      clearInterval(timer);
      timeLeft = TIMED_SECONDS;
      timeLeftEl.textContent = String(timeLeft);
      timer = setInterval(() => {
        timeLeft -= 1;
        timeLeftEl.textContent = String(timeLeft);
        if (timeLeft <= 0) {
          endGame("Out of time.");
        }
      }, 1000);
    }

    function toggleMode() {
      timedMode = !timedMode;
      updateModeUI();
      if (timedMode) {
        startTimer();
      } else {
        clearInterval(timer);
        timer = null;
      }
      // Soft reset progress but keep score; or do a full reset?
      resetGame(true);
    }

    function updateModeUI() {
      modeLabel.textContent = timedMode ? "Timed (60s)" : "Free mode";
      timerChipEl.style.display = timedMode ? "inline-flex" : "none";
    }

    function flash(el, html) {
      el.innerHTML = html;
      el.classList.add("show");
      el.style.outline = "2px solid rgba(125, 211, 252, .15)";
      setTimeout(() => { el.style.outline = "none"; }, 300);
    }
    function pulse(el, html) {
      el.innerHTML = html;
      el.classList.add("show");
      el.animate([{ transform: "scale(1)" },{ transform:"scale(1.02)" },{ transform:"scale(1)"}], { duration: 220, easing: "ease-out" });
    }

    // --- Events --------------------------------------------------------------
    checkBtn.addEventListener("click", checkAnswer);
    nextBtn.addEventListener("click", nextRound);
    hintBtn.addEventListener("click", showHint);
    resetBtn.addEventListener("click", () => resetGame());
    toggleModeBtn.addEventListener("click", toggleMode);

    answerEl.addEventListener("keydown", (e) => {
      if (e.key === "Enter" && !e.ctrlKey) {
        e.preventDefault();
        checkAnswer();
      } else if (e.key === "Enter" && e.ctrlKey) {
        e.preventDefault();
        nextRound();
      }
    });

    window.addEventListener("keydown", (e) => {
      if (e.altKey && (e.key.toLowerCase() === "h")) {
        e.preventDefault(); showHint();
      } else if (e.altKey && (e.key.toLowerCase() === "r")) {
        e.preventDefault(); resetGame();
      }
    });

    // --- Init ---------------------------------------------------------------
    (function init(){
      bestEl.textContent = String(best);
      updateModeUI();
      showRound();
      answerEl.focus();
    })();
  </script>
</body>
</html>
